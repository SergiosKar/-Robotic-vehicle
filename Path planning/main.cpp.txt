#include "mbed.h"
#include "header.h"

 
enum type{ still,frwd_str ,back_strt, right ,right_fast, left,left_fast,stop};

typedef struct{
    float time;
    type move_type;  
    }Move;
    
    
void frwd_fun(float l,float r);
void back_fun();
void left_fun();
void right_fun();
void leftfast_fun();
void rightfast_fun();
void stop_fun();
void still_fun();

float get_measur();
void init_mpu();

void circle();
//Left wheel
DigitalOut in1(PC_10);
DigitalOut in2(PC_11);
PwmOut ena(PC_2);


//Right wheel
DigitalOut in3(PA_13);
DigitalOut in4(PA_14);
PwmOut enb(PC_3);

DigitalOut led(LED1);
DigitalIn  user_but(PC_13);




// ********for MPU ************************************************************************************************************        
float sum = 0;
uint32_t sumCount = 0, mcount = 0;
char buffer[14];

   MPU9150 MPU9150;
   
   Timer t;

   Serial pc(USBTX, USBRX); // tx, rx

// ********************************************************************************************************************        

void circle(float time);

void calibrated_frwrd(float mvtime);
void calibrated_rotate_right(float degree);
void maketravel(Move travel[],int size);

float vel =0.38;//6.28 s ta 2 metra

int main() {
    
    
    
    
    
    //ena.period(0.1);
    //enb.period(0.1);
   
    init_mpu();
  
    led=!led;
    
    
    ///////straight line/////////////////
    
    while(user_but==1);
    
    Move m1;m1.time=2.0;m1.move_type=still;
    Move m2;m2.time=12/vel;m2.move_type=frwd_str;
    Move m3;m3.time=100;m3.move_type=still;
   
    Move travel1[]={m1,m2,m3};
    maketravel(travel1,2);
    
 
    ///////////////////////////////////
    
    
    //////triangle////////
   /*
    while(user_but==1);
    
    Move m3;m3.time=2.0;m3.move_type=still;
    Move m4;m4.time=12.0/vel;m4.move_type=frwd_str;
    Move m5;m5.time=78.0;m5.move_type=right_fast;
    Move m10;m10.time=2.0;m10.move_type=still;
    Move m6;m6.time=3.0/vel;m6.move_type=frwd_str;
    Move m7;m7.time=89.0;m7.move_type=right_fast;
    Move m11;m11.time=2.0;m11.move_type=still;
    Move m8;m8.time=12.36/vel;m8.move_type=frwd_str;
    
   
    Move travel2[]={m3,m4,m5,m10,m6,m7,m11,m8};
    maketravel(travel2,8);
   
     */
     
     ////circle/////////////
      //while(user_but==1);  
        //circle(45.0);

        ///////////////////////////////
}



void maketravel(Move travel[],int size){
      
    for( int state=0;state<size;state++){
        
       
            
            switch(travel[state].move_type){
                
                case 1:calibrated_frwrd(travel[state].time);
                    break;
                
                case 2:back_fun(); wait(travel[state].time);       
                    break;
                
                case 3:right_fun();wait(travel[state].time);     
                    break;
                
                case 4:calibrated_rotate_right(travel[state].time);   
                    break;
                
                case 5:left_fun();wait(travel[state].time);     
                    break;
                
                case 6: leftfast_fun();wait(travel[state].time);     
                    break;
                     
                 case 7:stop_fun();wait(travel[state].time);     
                    break;
                 
                 case 0:still_fun();wait(travel[state].time);     
                break;
                
                default: sleep();
                break;
                
                }
         
       
               
    
        
   } 
    
}


void calibrated_frwrd(float mvtime){
    float cur_gz;
    float des_gz=0;
    float l=0.6;
    float r=0.66;//0.64 /0.7
    float error=0;
    float kp=0.0005;
    
    Timer movetimer;
   
    
    
    
    movetimer.start();
   // des_gz=get_measur();
   // printf("%f \n",des_gz);
    while(1){
        
        
       cur_gz=get_measur();
       error=des_gz-cur_gz;
       
        
      l=l+kp*error;
      r=r-kp*error;
      frwd_fun(l,r);    
      
      printf("%f %f \n",l,r);
      
      
        
    if(movetimer.read()>mvtime)
        break;
         
         
        
   }
     movetimer.stop(); 
     movetimer.reset();
     stop_fun(); 
}

void calibrated_rotate_right(float degree){
  
   
    
    Timer rottimer;
    float gz;
    float dt;
    float cur_yaw=0;
    rottimer.start();
    
    
    
    while(1){
        
        
    
      
      gz=get_measur();
      dt=rottimer.read();
      cur_yaw=cur_yaw- gz*dt; 
        rottimer.reset();
        
      if(cur_yaw>-degree)
        right_fun();
       else{
         stop_fun(); 
         break;
     }
     
      

         
        
   }
   

    
    
}
void circle(float time){
    float gz;
    
   
     float des_gz=-7.8;
    float l=0.65;
    float r=0.7;//0.7
    float anerror=0;
    float kp=0.0005;
    
   
    Timer rottimer;
    
    rottimer.start();

   
   // des_gz=get_measur();
   // printf("%f \n",des_gz);
    while(1){
        
        
       gz=get_measur();
    
      anerror=des_gz- gz;
       
        
      l=l+kp*anerror;
      r=r-kp*anerror;
      frwd_fun(l,r);    
      
      printf("%f %f \n",l,r);
      
      
        if(rottimer.read()>47.0)
            break;
   
         
         
        
   }
   stop_fun();
   } 
         
        
      
    

void frwd_fun(float l,float r){
    
    ena.write(l);
    
    in1=1;
    in2=0;
    
   enb.write(r);
    in3=1;
    in4=0;
    
    
    }
    

void back_fun(){
    
    ena.write(0.93);
    in1=0;
    in2=1;
    
    enb.write(0.89);
    in3=0;
    in4=1;
    
    }


void left_fun(){
    
    ena.write(0);
    
    
    enb.write(0.4);
    in3=1;
    in4=0;
    
    }


void leftfast_fun(){
    
    ena.write(0.4);
    in1=0;
    in2=1;
    
    enb.write(0.4);
    in3=1;
    in4=0;
    
   
    
    }
    
    

void right_fun(){
    
    ena.write(0.4);
    in1=1;
    in2=0;
    
    enb.write(0);
    
   
    
    }
    

void rightfast_fun(){
    
    ena.write(0.4);
    in1=1;
    in2=0;
    
    enb.write(0.9);
    in3=0;
    in4=1;
    
    }
    
        

void stop_fun(){
    
     ena.write(0.9);
    in1=1;
    in2=1;
    
    enb.write(0.9);
    in3=1;
    in4=1;
    
    }
    
void still_fun(){

     ena.write(0);
     enb.write(0);


    }
    
    

void init_mpu(){
    
    pc.baud(9600);  

  pc.printf( "Hello three wheel robotic car\r\n" ) ;    
  pc.printf("CPU SystemCoreClock is %d Hz\r\n", SystemCoreClock);   
    
  //Set up I2C in fast mode: 400 kHz   
  i2c.frequency(400000);  
  
  t.start();        
  
 
  // Read the WHO_AM_I register, this is a good test of communication
  uint8_t whoami = MPU9150.readByte(MPU9150_ADDRESS, WHO_AM_I_MPU9150);  // Read WHO_AM_I register for MPU-9250
  pc.printf("I AM 0x%x\n\r", whoami); pc.printf("I SHOULD BE 0x68\n\r");
  
  if (whoami == 0x68) // WHO_AM_I should be 0x68
  {  
    pc.printf("MPU9150 WHO_AM_I is 0x%x\n\r", whoami);
    pc.printf("MPU9150 is online...\n\r");
    wait(1);
    
    MPU9150.MPU9150SelfTest(SelfTest);
    pc.printf("x-axis self test: acceleration trim within %f % of factory value\n\r", SelfTest[0]);
    pc.printf("y-axis self test: acceleration trim within %f % of factory value\n\r", SelfTest[1]);
    pc.printf("z-axis self test: acceleration trim within %f % of factory value\n\r", SelfTest[2]);
    pc.printf("x-axis self test: gyration trim within %f % of factory value\n\r", SelfTest[3]);
    pc.printf("y-axis self test: gyration trim within %f % of factory value\n\r", SelfTest[4]);
    pc.printf("z-axis self test: gyration trim within %f % of factory value\n\r", SelfTest[5]);
    wait(1);
    MPU9150.resetMPU9150(); // Reset registers to default in preparation for device calibration
    MPU9150.calibrateMPU9150(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers  
    pc.printf("x gyro bias = %f\n\r", gyroBias[0]);
    pc.printf("y gyro bias = %f\n\r", gyroBias[1]);
    pc.printf("z gyro bias = %f\n\r", gyroBias[2]);
    pc.printf("x accel bias = %f\n\r", accelBias[0]);
    pc.printf("y accel bias = %f\n\r", accelBias[1]);
    pc.printf("z accel bias = %f\n\r", accelBias[2]);
    wait(1);
    MPU9150.initMPU9150(); 
    pc.printf("MPU9150 initialized for active data mode....\n\r"); // Initialize device for active mode read of acclerometer, gyroscope, and temperature
    MPU9150.initAK8975A(magCalibration);
    pc.printf("AK8975 initialized for active data mode....\n\r"); // Initialize device for active mode read of magnetometer
    
   }
   else
   {
    pc.printf("Could not connect to MPU9150: \n\r");
    pc.printf("%#x \n",  whoami);
    while(1) ; // Loop forever if communication doesn't happen
    }

     MagRate = 10; // set magnetometer read rate in Hz; 10 to 100 (max) Hz are reasonable values
    MPU9150.getAres(); // Get accelerometer sensitivity
    MPU9150.getGres(); // Get gyro sensitivity
    mRes = 10.*1229./4096.; // Conversion from 1229 microTesla full scale (4096) to 12.29 Gauss full scale
    // So far, magnetometer bias is calculated and subtracted here manually, should construct an algorithm to do it automatically
    // like the gyro and accelerometer biases
    magbias[0] = -5.;   // User environmental x-axis correction in milliGauss
    magbias[1] = -95.;  // User environmental y-axis correction in milliGauss
    magbias[2] = -260.; // User environmental z-axis correction in milliGauss
    }


float get_measur(){
    // If intPin goes high, all data registers have new data
  if(MPU9150.readByte(MPU9150_ADDRESS, INT_STATUS) & 0x01) {  // On interrupt, check if data ready interrupt

    MPU9150.readAccelData(accelCount);  // Read the x/y/z adc values   
    // Now we'll calculate the accleration value into actual g's
    ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
    ay = (float)accelCount[1]*aRes; // - accelBias[1];   
    az = (float)accelCount[2]*aRes; // - accelBias[2];  
   
    MPU9150.readGyroData(gyroCount);  // Read the x/y/z adc values
    // Calculate the gyro value into actual degrees per second
    gx = (float)gyroCount[0]*gRes; // - gyroBias[0];  // get actual gyro value, this depends on scale being set
    gy = (float)gyroCount[1]*gRes; // - gyroBias[1];  
    gz = (float)gyroCount[2]*gRes; // - gyroBias[2];   
  
    mcount++;
    if (mcount > 200/MagRate) {  // this is a poor man's way of setting the magnetometer read rate (see below) 
    MPU9150.readMagData(magCount);  // Read the x/y/z adc values
    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental corrections
    mx = (float)magCount[0]*mRes*magCalibration[0] - magbias[0];  // get actual magnetometer value, this depends on scale being set
    my = (float)magCount[1]*mRes*magCalibration[1] - magbias[1];  
    mz = (float)magCount[2]*mRes*magCalibration[2] - magbias[2];   
    mcount = 0;
    }
  }
   
    Now = t.read_us();
    deltat = (float)((Now - lastUpdate)/1000000.0f) ; // set integration time by time elapsed since last filter update
    lastUpdate = Now;
    
    sum += deltat;
    sumCount++;
    
//    if(lastUpdate - firstUpdate > 10000000.0f) {
//     beta = 0.04;  // decrease filter gain after stabilized
//     zeta = 0.015; // increasey bias drift gain after stabilized
 //   }
    
   // Pass gyro rate as rad/s
//  MPU9150.MadgwickQuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
  MPU9150.MahonyQuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f, my, mx, mz);

    // Serial print and/or display at 0.5 s rate independent of data rates
    delt_t = t.read_ms() - count;
    if (delt_t > 500) { // update LCD once per half-second independent of read rate

/*
    pc.printf("ax = %f", 1000*ax); 
    pc.printf(" ay = %f", 1000*ay); 
    pc.printf(" az = %f  mg\n\r", 1000*az); 

    pc.printf("gx = %f", gx); 
    pc.printf(" gy = %f", gy); 
    */
    pc.printf(" gz = %f  deg/s\n\r", gz); 
    
   /* pc.printf("gx = %f", mx); 
    pc.printf(" gy = %f", my); 
    pc.printf(" gz = %f  mG\n\r", mz); 
    
    tempCount = MPU9150.readTempData();  // Read the adc values
    temperature = ((float) tempCount) / 340.0f + 36.53f; // Temperature in degrees Centigrade
    pc.printf(" temperature = %f  C\n\r", temperature); 
    
    pc.printf("q0 = %f\n\r", q[0]);
    pc.printf("q1 = %f\n\r", q[1]);
    pc.printf("q2 = %f\n\r", q[2]);
    pc.printf("q3 = %f\n\r", q[3]);     
    
   */ 
    
/*    lcd.clear();
    lcd.printString("MPU9150", 0, 0);
    lcd.printString("x   y   z", 0, 1);
    sprintf(buffer, "%d %d %d mg", (int)(1000.0f*ax), (int)(1000.0f*ay), (int)(1000.0f*az));
    lcd.printString(buffer, 0, 2);
    sprintf(buffer, "%d %d %d deg/s", (int)gx, (int)gy, (int)gz);
    lcd.printString(buffer, 0, 3);
    sprintf(buffer, "%d %d %d mG", (int)mx, (int)my, (int)mz);
    lcd.printString(buffer, 0, 4); 
 */  

  // Define output variables from updated quaternion---these are Tait-Bryan angles, commonly used in aircraft orientation.
  // In this coordinate system, the positive z-axis is down toward Earth. 
  // Yaw is the angle between Sensor x-axis and Earth magnetic North (or true North if corrected for local declination, looking down on the sensor positive yaw is counterclockwise.
  // Pitch is angle between sensor x-axis and Earth ground plane, toward the Earth is positive, up toward the sky is negative.
  // Roll is angle between sensor y-axis and Earth ground plane, y-axis up is positive roll.
  // These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
  // Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
  // applied in the correct order which for this configuration is yaw, pitch, and then roll.
  // For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
    yaw   = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);   
    pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
    roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
    pitch *= 180.0f / PI;
    yaw   *= 180.0f / PI; 
    yaw   -= 13.8f; // Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04
    roll  *= 180.0f / PI;

    //pc.printf("Yaw, Pitch, Roll: %f %f %f\n\r", yaw, pitch, roll);
    //pc.printf("average rate = %f\n\r", (float) sumCount/sum);
//    sprintf(buffer, "YPR: %f %f %f", yaw, pitch, roll);
//    lcd.printString(buffer, 0, 4);
//    sprintf(buffer, "rate = %f", (float) sumCount/sum);
//    lcd.printString(buffer, 0, 5);
    
    myled= !myled;
    count = t.read_ms(); 

    if(count > 1<<21) {
        t.start(); // sB tart the timer over again if ~30 minutes has passed
        count = 0;
        deltat= 0;
        lastUpdate = t.read_us();
    }
    sum = 0;
    sumCount = 0; 
   }
   
   
   return gz;
 
 }
 
